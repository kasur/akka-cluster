application {

  name = actor-system-on-steroids

  # The Akka actor system will bind to this host and port
  # The default can be overwritten using the APP_HOST and APP_PORT env variables
  # Note: Default host is `InetAddress.getLocalHost.getHostAddress`
  host = ${?APP_HOST}
  port = ${?APP_PORT}
  # A seeds file can optionally be specified using the APP_SEEDS_FILE env variable
  cluster.seedsFile = ${?APP_SEEDS_FILE}
}

akka {

  # Required for Akka's cluster functionality
  actor.provider = "akka.cluster.ClusterActorRefProvider"

  remote {
    # List of the transport drivers that will be loaded by the remoting.
    # A list of fully qualified config paths must be provided where
    # the given configuration path contains a transport-class key
    # pointing to an implementation class of the Transport interface.
    # If multiple transports are provided, the address of the first
    # one will be used as a default address.
    enabled-transports = ["akka.remote.netty.tcp"]


    # Sets the log granularity level at which Akka logs remoting events. This setting
    # can take the values OFF, ERROR, WARNING, INFO, DEBUG, or ON. For compatibility
    # reasons the setting "on" will default to "debug" level. Please note that the effective
    # logging level is still determined by the global logging level of the actor system:
    # for example debug level remoting events will be only logged if the system
    # is running with debug level logging.
    # Failures to deserialize received messages also fall under this flag.
    log-remote-lifecycle-events = off

    netty.tcp {

      # The hostname or ip clients should connect to.
      # InetAddress.getLocalHost.getHostAddress is used if empty
      hostname = ${?application.host}

      # The default remote server port clients should connect to.
      # Default is 2552 (AKKA), use 0 if you want a random available port
      # This port needs to be unique for each actor system on the same machine.
      port = ${?application.port}

      # Use this setting to bind a network interface to a different hostname or ip
      # than remoting protocol expects messages at.
      # Use "0.0.0.0" to bind to all interfaces.
      # akka.remote.netty.tcp.hostname if empty
      # [kasured] seems like the default values does not play well with docker and coreos bridging
      # [kasured] also see discussion here https://github.com/akka/akka/pull/15610
      bind-hostname="0.0.0.0"
    }

  }

  cluster = {

    seed-node-timeout = 300s

    # Should the 'leader' in the cluster be allowed to automatically mark
    # unreachable nodes as DOWN after a configured time of unreachability?
    # Using auto-down implies that two separate clusters will automatically be
    # formed in case of network partition.
    # Disable with "off" or specify a duration to enable auto-down.
    auto-down-unreachable-after = 30 s

    metrics = {
      # How often a node publishes metrics information.
      gossip-interval = 5 s
    }

    failure-detector = {
      # How often keep-alive heartbeat messages should be sent to each connection.
      heartbeat-interval = 10 s
    }

    metrics {
      ## Disable it for now (later on play with sigar and kamon)
      enabled = off
    }

  }

  # Use SLF4J for logging
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  extensions = ["akka.contrib.pattern.ClusterReceptionistExtension"]

}